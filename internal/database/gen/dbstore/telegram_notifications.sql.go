// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: telegram_notifications.sql

package dbstore

import (
	"context"
	"database/sql"
)

const createTelegramNotification = `-- name: CreateTelegramNotification :one
INSERT INTO telegram_notifications (telegram_id, entity_id)
VALUES ($1, $2)
RETURNING id, telegram_id, entity_id, last_post_date, checked_at
`

type CreateTelegramNotificationParams struct {
	TelegramID int64
	EntityID   int32
}

func (q *Queries) CreateTelegramNotification(ctx context.Context, arg CreateTelegramNotificationParams) (TelegramNotification, error) {
	row := q.db.QueryRowContext(ctx, createTelegramNotification, arg.TelegramID, arg.EntityID)
	var i TelegramNotification
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.EntityID,
		&i.LastPostDate,
		&i.CheckedAt,
	)
	return i, err
}

const deleteTelegramNotification = `-- name: DeleteTelegramNotification :one
DELETE FROM telegram_notifications WHERE telegram_id=$1 AND entity_id=$2
RETURNING true
`

type DeleteTelegramNotificationParams struct {
	TelegramID int64
	EntityID   int32
}

func (q *Queries) DeleteTelegramNotification(ctx context.Context, arg DeleteTelegramNotificationParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, deleteTelegramNotification, arg.TelegramID, arg.EntityID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getTelegramNotificationList = `-- name: GetTelegramNotificationList :many
SELECT telegram_notifications.id, telegram_id, entity_id, last_post_date, checked_at, ve.id, slug, name FROM telegram_notifications
JOIN vk_entities ve on telegram_notifications.entity_id = ve.id
WHERE telegram_notifications.checked_at IS NULL OR
      telegram_notifications.checked_at < now() - INTERVAL '1 hour'
`

type GetTelegramNotificationListRow struct {
	ID           int32
	TelegramID   int64
	EntityID     int32
	LastPostDate sql.NullInt64
	CheckedAt    sql.NullTime
	ID_2         int32
	Slug         string
	Name         string
}

func (q *Queries) GetTelegramNotificationList(ctx context.Context) ([]GetTelegramNotificationListRow, error) {
	rows, err := q.db.QueryContext(ctx, getTelegramNotificationList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTelegramNotificationListRow
	for rows.Next() {
		var i GetTelegramNotificationListRow
		if err := rows.Scan(
			&i.ID,
			&i.TelegramID,
			&i.EntityID,
			&i.LastPostDate,
			&i.CheckedAt,
			&i.ID_2,
			&i.Slug,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTelegramNotificationsByTelegramID = `-- name: GetTelegramNotificationsByTelegramID :many
SELECT telegram_notifications.id, telegram_id, entity_id, last_post_date, checked_at, ve.id, slug, name FROM telegram_notifications
JOIN vk_entities ve on telegram_notifications.entity_id = ve.id
WHERE telegram_notifications.telegram_id=$1
`

type GetTelegramNotificationsByTelegramIDRow struct {
	ID           int32
	TelegramID   int64
	EntityID     int32
	LastPostDate sql.NullInt64
	CheckedAt    sql.NullTime
	ID_2         int32
	Slug         string
	Name         string
}

func (q *Queries) GetTelegramNotificationsByTelegramID(ctx context.Context, telegramID int64) ([]GetTelegramNotificationsByTelegramIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTelegramNotificationsByTelegramID, telegramID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTelegramNotificationsByTelegramIDRow
	for rows.Next() {
		var i GetTelegramNotificationsByTelegramIDRow
		if err := rows.Scan(
			&i.ID,
			&i.TelegramID,
			&i.EntityID,
			&i.LastPostDate,
			&i.CheckedAt,
			&i.ID_2,
			&i.Slug,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isTelegramNotificationExists = `-- name: IsTelegramNotificationExists :one
SELECT EXISTS(SELECT 1 FROM telegram_notifications WHERE telegram_id=$1 AND entity_id=$2)
`

type IsTelegramNotificationExistsParams struct {
	TelegramID int64
	EntityID   int32
}

func (q *Queries) IsTelegramNotificationExists(ctx context.Context, arg IsTelegramNotificationExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isTelegramNotificationExists, arg.TelegramID, arg.EntityID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateTelegramNotification = `-- name: UpdateTelegramNotification :one
UPDATE telegram_notifications
SET checked_at=now(), last_post_date=$1
WHERE telegram_id=$2 AND entity_id=$3
RETURNING id, telegram_id, entity_id, last_post_date, checked_at
`

type UpdateTelegramNotificationParams struct {
	LastPostDate sql.NullInt64
	TelegramID   int64
	EntityID     int32
}

func (q *Queries) UpdateTelegramNotification(ctx context.Context, arg UpdateTelegramNotificationParams) (TelegramNotification, error) {
	row := q.db.QueryRowContext(ctx, updateTelegramNotification, arg.LastPostDate, arg.TelegramID, arg.EntityID)
	var i TelegramNotification
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.EntityID,
		&i.LastPostDate,
		&i.CheckedAt,
	)
	return i, err
}
